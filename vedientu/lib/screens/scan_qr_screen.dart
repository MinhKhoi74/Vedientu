import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import '../services/api_service.dart';
import 'package:go_router/go_router.dart';
class ScanQRScreen extends StatefulWidget {
  const ScanQRScreen({Key? key}) : super(key: key);

  @override
  _ScanQRScreenState createState() => _ScanQRScreenState();
}

class _ScanQRScreenState extends State<ScanQRScreen> {
  Barcode? result;
  final ApiService apiService = ApiService();
  bool isProcessing = false;
  final MobileScannerController cameraController = MobileScannerController(); // Kh·ªüi t·∫°o controller

  @override
  void dispose() {
    cameraController.dispose(); // Gi·∫£i ph√≥ng camera khi tho√°t
    super.dispose();
  }

  // ‚úÖ H√†m x·ª≠ l√Ω qu√©t m√£ QR
  void _onDetect(BarcodeCapture barcodeCapture) async {
  if (isProcessing) return; // Kh√¥ng x·ª≠ l√Ω n·∫øu ƒëang b·∫≠n
  setState(() => isProcessing = true);

  final Barcode? barcode = barcodeCapture.barcodes.isNotEmpty ? barcodeCapture.barcodes.first : null;
  if (barcode != null && barcode.rawValue != null) {
    setState(() => result = barcode);
    
    print("üîç M√£ QR qu√©t ƒë∆∞·ª£c: ${barcode.rawValue}");

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng m√£ QR
    if (!barcode.rawValue!.startsWith("TicketID")) {
      _showMessage("‚ùå M√£ QR kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
      setState(() => isProcessing = false);
      return;
    }

    // T√°ch m√£ QR v√† ch·ªâ l·∫•y ph·∫ßn "TicketID"
    String ticketId = barcode.rawValue!.split(",").firstWhere((element) => element.startsWith("TicketID")).split(":").last.trim();

    try {
      print("üì§ G·ª≠i request ƒë·∫øn API v·ªõi m√£ TicketID: $ticketId");
      final response = await apiService.scanDriverQR("TicketID:$ticketId");
      print("üì• Ph·∫£n h·ªìi t·ª´ API: $response");

      if (response != null) {
        final isSuccess = response['success'] as bool? ?? false;
        final message = response['message'] as String? ?? 'Kh√¥ng c√≥ th√¥ng b√°o t·ª´ server';

        if (isSuccess) {
          _showMessage('‚úÖ $message');
          context.go('/driver-home'); // Chuy·ªÉn v·ªÅ trang ch√≠nh c·ªßa t√†i x·∫ø
        } else {
          _showMessage('‚ùå $message');
        }
      } else {
        _showMessage('‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server!');
      }
    } catch (e) {
      _showMessage('‚ùå L·ªói h·ªá th·ªëng: $e');
    }
  }

  Future.delayed(const Duration(seconds: 2), () {
    setState(() => isProcessing = false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i sau 2s
  });
}


  // ‚úÖ H√†m hi·ªÉn th·ªã th√¥ng b√°o
  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Qu√©t M√£ QR T√†i X·∫ø'),
      leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/driver-home'), // Quay v·ªÅ trang ch√≠nh
        )),
      body: Column(
        children: <Widget>[
          Expanded(
            flex: 5,
            child: MobileScanner(
              controller: cameraController, // D√πng controller ƒë·ªÉ tr√°nh l·ªói camera
              onDetect: _onDetect,
            ),
          ),
          Expanded(
            flex: 1,
            child: Center(
              child: (result != null)
                  ? Text('M√£ QR: ${result!.rawValue}')
                  : const Text('Qu√©t m√£ QR ƒë·ªÉ ki·ªÉm tra'),
            ),
          ),
        ],
      ),
    );
  }
}
